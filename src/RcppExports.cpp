// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// InnerBall
Rcpp::NumericVector InnerBall(Rcpp::Reference P);
RcppExport SEXP _volesti_InnerBall(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(InnerBall(P));
    return rcpp_result_gen;
END_RCPP
}
// SliceOfSimplex
double SliceOfSimplex(Rcpp::NumericVector a, double z0);
RcppExport SEXP _volesti_SliceOfSimplex(SEXP aSEXP, SEXP z0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    rcpp_result_gen = Rcpp::wrap(SliceOfSimplex(a, z0));
    return rcpp_result_gen;
END_RCPP
}
// copula1
Rcpp::NumericMatrix copula1(Rcpp::NumericVector h1, Rcpp::NumericVector h2, Rcpp::Nullable<unsigned int> numSlices, Rcpp::Nullable<unsigned int> N);
RcppExport SEXP _volesti_copula1(SEXP h1SEXP, SEXP h2SEXP, SEXP numSlicesSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type numSlices(numSlicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(copula1(h1, h2, numSlices, N));
    return rcpp_result_gen;
END_RCPP
}
// copula2
Rcpp::NumericMatrix copula2(Rcpp::NumericVector h, Rcpp::NumericMatrix E, Rcpp::Nullable<unsigned int> numSlices, Rcpp::Nullable<unsigned int> N);
RcppExport SEXP _volesti_copula2(SEXP hSEXP, SEXP ESEXP, SEXP numSlicesSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type E(ESEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type numSlices(numSlicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(copula2(h, E, numSlices, N));
    return rcpp_result_gen;
END_RCPP
}
// exact_vol
double exact_vol(Rcpp::Nullable<Rcpp::Reference> P, Rcpp::Nullable<std::string> body, Rcpp::Nullable<Rcpp::List> Parameters);
RcppExport SEXP _volesti_exact_vol(SEXP PSEXP, SEXP bodySEXP, SEXP ParametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Reference> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type body(bodySEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type Parameters(ParametersSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_vol(P, body, Parameters));
    return rcpp_result_gen;
END_RCPP
}
// poly_gen
Rcpp::NumericMatrix poly_gen(int kind_gen, bool Vpoly_gen, int dim_gen, int m_gen);
RcppExport SEXP _volesti_poly_gen(SEXP kind_genSEXP, SEXP Vpoly_genSEXP, SEXP dim_genSEXP, SEXP m_genSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type kind_gen(kind_genSEXP);
    Rcpp::traits::input_parameter< bool >::type Vpoly_gen(Vpoly_genSEXP);
    Rcpp::traits::input_parameter< int >::type dim_gen(dim_genSEXP);
    Rcpp::traits::input_parameter< int >::type m_gen(m_genSEXP);
    rcpp_result_gen = Rcpp::wrap(poly_gen(kind_gen, Vpoly_gen, dim_gen, m_gen));
    return rcpp_result_gen;
END_RCPP
}
// rotating
Rcpp::NumericMatrix rotating(Rcpp::Reference P);
RcppExport SEXP _volesti_rotating(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(rotating(P));
    return rcpp_result_gen;
END_RCPP
}
// rounding
Rcpp::List rounding(Rcpp::Reference P, Rcpp::Nullable<std::string> WalkType, Rcpp::Nullable<unsigned int> walk_step, Rcpp::Nullable<double> radius);
RcppExport SEXP _volesti_rounding(SEXP PSEXP, SEXP WalkTypeSEXP, SEXP walk_stepSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type WalkType(WalkTypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type walk_step(walk_stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(rounding(P, WalkType, walk_step, radius));
    return rcpp_result_gen;
END_RCPP
}
// sample_points
Rcpp::NumericMatrix sample_points(Rcpp::Nullable<Rcpp::Reference> P, Rcpp::Nullable<unsigned int> N, Rcpp::Nullable<std::string> distribution, Rcpp::Nullable<std::string> WalkType, Rcpp::Nullable<unsigned int> walk_step, Rcpp::Nullable<bool> exact, Rcpp::Nullable<std::string> body, Rcpp::Nullable<Rcpp::List> Parameters, Rcpp::Nullable<Rcpp::NumericVector> InnerPoint);
RcppExport SEXP _volesti_sample_points(SEXP PSEXP, SEXP NSEXP, SEXP distributionSEXP, SEXP WalkTypeSEXP, SEXP walk_stepSEXP, SEXP exactSEXP, SEXP bodySEXP, SEXP ParametersSEXP, SEXP InnerPointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Reference> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type WalkType(WalkTypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type walk_step(walk_stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type body(bodySEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type InnerPoint(InnerPointSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_points(P, N, distribution, WalkType, walk_step, exact, body, Parameters, InnerPoint));
    return rcpp_result_gen;
END_RCPP
}
// volume
double volume(Rcpp::Reference P, Rcpp::Nullable<unsigned int> walk_step, Rcpp::Nullable<double> error, Rcpp::Nullable<Rcpp::NumericVector> InnerBall, Rcpp::Nullable<std::string> Algo, Rcpp::Nullable<std::string> WalkType, Rcpp::Nullable<bool> rounding, Rcpp::Nullable<Rcpp::List> Parameters);
RcppExport SEXP _volesti_volume(SEXP PSEXP, SEXP walk_stepSEXP, SEXP errorSEXP, SEXP InnerBallSEXP, SEXP AlgoSEXP, SEXP WalkTypeSEXP, SEXP roundingSEXP, SEXP ParametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type walk_step(walk_stepSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type error(errorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type InnerBall(InnerBallSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type Algo(AlgoSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type WalkType(WalkTypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type Parameters(ParametersSEXP);
    rcpp_result_gen = Rcpp::wrap(volume(P, walk_step, error, InnerBall, Algo, WalkType, rounding, Parameters));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_yada();

static const R_CallMethodDef CallEntries[] = {
    {"_volesti_InnerBall", (DL_FUNC) &_volesti_InnerBall, 1},
    {"_volesti_SliceOfSimplex", (DL_FUNC) &_volesti_SliceOfSimplex, 2},
    {"_volesti_copula1", (DL_FUNC) &_volesti_copula1, 4},
    {"_volesti_copula2", (DL_FUNC) &_volesti_copula2, 4},
    {"_volesti_exact_vol", (DL_FUNC) &_volesti_exact_vol, 3},
    {"_volesti_poly_gen", (DL_FUNC) &_volesti_poly_gen, 4},
    {"_volesti_rotating", (DL_FUNC) &_volesti_rotating, 1},
    {"_volesti_rounding", (DL_FUNC) &_volesti_rounding, 4},
    {"_volesti_sample_points", (DL_FUNC) &_volesti_sample_points, 9},
    {"_volesti_volume", (DL_FUNC) &_volesti_volume, 8},
    {"_rcpp_module_boot_yada", (DL_FUNC) &_rcpp_module_boot_yada, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_volesti(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
